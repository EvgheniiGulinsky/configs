import React, { useState } from 'react';
import {
  Box,
  Stack,
  Typography,
  IconButton,
  Button,
  Radio,
  RadioGroup,
  FormControlLabel,
} from '@mui/material';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import dayjs, { Dayjs } from 'dayjs';
import DeleteIcon from '@mui/icons-material/Delete';
import AddIcon from '@mui/icons-material/Add';

type WorkingDay = {
  dateFrom: string;
  dateTo: string;
};

export default function WorkingDaysPicker() {
  const [workingDays, setWorkingDays] = useState<WorkingDay[]>([]);
  const [selectedIndex, setSelectedIndex] = useState<number>(-1);
  const [newInterval, setNewInterval] = useState<WorkingDay | null>(null);

  const handleDateChange = (key: 'dateFrom' | 'dateTo', value: Dayjs | null) => {
    if (!newInterval || !value) return;
    setNewInterval({ ...newInterval, [key]: value.format('YYYY-MM-DD') });
  };

  const handleAddClick = () => {
    setNewInterval({
      dateFrom: dayjs().format('YYYY-MM-DD'),
      dateTo: dayjs().add(1, 'day').format('YYYY-MM-DD'),
    });
  };

  const handleSaveClick = () => {
    if (!newInterval) return;
    if (dayjs(newInterval.dateFrom).isAfter(dayjs(newInterval.dateTo))) {
      alert('Дата начала не может быть позже даты окончания');
      return;
    }

    const updated = [...workingDays, newInterval];
    setWorkingDays(updated);
    setSelectedIndex(updated.length - 1);
    setNewInterval(null);
  };

  const handleCancelClick = () => {
    setNewInterval(null);
  };

  const handleRemove = (index: number) => {
    const updated = workingDays.filter((_, i) => i !== index);
    setWorkingDays(updated);
    if (selectedIndex === index) {
      setSelectedIndex(-1);
    } else if (selectedIndex > index) {
      setSelectedIndex((prev) => prev - 1);
    }
  };

  return (
    <LocalizationProvider dateAdapter={AdapterDayjs}>
      <Stack spacing={3}>
        <Typography variant="h6">Рабочие интервалы</Typography>

        <RadioGroup
          value={selectedIndex}
          onChange={(e) => setSelectedIndex(Number(e.target.value))}
        >
          {workingDays.map((item, index) => (
            <Box
              key={index}
              display="flex"
              alignItems="center"
              gap={2}
              sx={{ flexWrap: 'wrap' }}
            >
              <FormControlLabel
                value={index}
                control={<Radio />}
                label=""
              />

              <DatePicker
                label="Дата с"
                value={dayjs(item.dateFrom)}
                readOnly
              />
              <DatePicker
                label="Дата по"
                value={dayjs(item.dateTo)}
                readOnly
              />

              <IconButton
                color="error"
                onClick={() => handleRemove(index)}
                aria-label="удалить"
              >
                <DeleteIcon />
              </IconButton>
            </Box>
          ))}
        </RadioGroup>

        {/* Новый редактируемый интервал */}
        {newInterval && (
          <Box
            display="flex"
            alignItems="center"
            gap={2}
            sx={{ flexWrap: 'wrap' }}
          >
            <DatePicker
              label="Дата с"
              value={dayjs(newInterval.dateFrom)}
              onChange={(value) => handleDateChange('dateFrom', value)}
            />
            <DatePicker
              label="Дата по"
              value={dayjs(newInterval.dateTo)}
              onChange={(value) => handleDateChange('dateTo', value)}
            />

            <Button
              variant="contained"
              color="primary"
              onClick={handleSaveClick}
            >
              Сохранить
            </Button>

            <Button
              variant="outlined"
              color="inherit"
              onClick={handleCancelClick}
            >
              Отменить
            </Button>
          </Box>
        )}

        {/* Кнопка добавления */}
        <Button
          variant="outlined"
          startIcon={<AddIcon />}
          onClick={handleAddClick}
          disabled={!!newInterval}
        >
          Добавить интервал
        </Button>
      </Stack>
    </LocalizationProvider>
  );
}
