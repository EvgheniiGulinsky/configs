import React, { useState } from "react";
import axios from "axios";
import {
  Box,
  Button,
  Drawer,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TextField,
  Typography,
  Paper,
  IconButton,
} from "@mui/material";
import EditIcon from "@mui/icons-material/Edit";
import DeleteIcon from "@mui/icons-material/Delete";

type User = {
  id: number;
  name: string;
  email: string;
};

export default function UserTable() {
  const [users, setUsers] = useState<User[]>([]);
  const [drawerOpen, setDrawerOpen] = useState(false);
  const [formName, setFormName] = useState("");
  const [formEmail, setFormEmail] = useState("");

  // Загрузка пользователей при первом рендере
  React.useEffect(() => {
    axios.get("/api/users").then((res) => {
      setUsers(res.data);
    });
  }, []);

  const handleAddUser = async () => {
    if (!formName.trim() || !formEmail.trim()) return;

    try {
      const res = await axios.post("/api/users", {
        name: formName,
        email: formEmail,
      });

      setUsers((prev) => [...prev, res.data]);
      setFormName("");
      setFormEmail("");
      setDrawerOpen(false);
    } catch (error) {
      console.error("Ошибка при добавлении пользователя", error);
    }
  };

  const handleDeleteUser = async (id: number) => {
    try {
      await axios.delete(`/api/users/${id}`);
      setUsers((prev) => prev.filter((user) => user.id !== id));
    } catch (error) {
      console.error("Ошибка при удалении пользователя", error);
    }
  };

  return (
    <Box p={4}>
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
        <Typography variant="h6">Пользователи</Typography>
        <Button variant="contained" onClick={() => setDrawerOpen(true)}>
          Добавить пользователя
        </Button>
      </Box>

      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Имя</TableCell>
              <TableCell>Email</TableCell>
              <TableCell align="right">Действия</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {users.map((user) => (
              <TableRow key={user.id}>
                <TableCell>{user.name}</TableCell>
                <TableCell>{user.email}</TableCell>
                <TableCell align="right">
                  <IconButton onClick={() => {}} aria-label="Редактировать">
                    <EditIcon />
                  </IconButton>
                  <IconButton
                    onClick={() => handleDeleteUser(user.id)}
                    aria-label="Удалить"
                    color="error"
                  >
                    <DeleteIcon />
                  </IconButton>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>

      <Drawer
        anchor="right"
        open={drawerOpen}
        onClose={() => setDrawerOpen(false)}
        PaperProps={{ sx: { width: 500 } }} // ← ширина дровера
      >
        <Box p={3}>
          <Typography variant="h6" mb={2}>Новый пользователь</Typography>
          <TextField
            label="Имя"
            fullWidth
            margin="normal"
            value={formName}
            onChange={(e) => setFormName(e.target.value)}
          />
          <TextField
            label="Email"
            fullWidth
            margin="normal"
            value={formEmail}
            onChange={(e) => setFormEmail(e.target.value)}
          />
          <Button variant="contained" fullWidth onClick={handleAddUser}>
            Добавить
          </Button>
        </Box>
      </Drawer>
    </Box>
  );
}
