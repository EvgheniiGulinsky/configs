import React, { useState } from "react";
import {
  Box,
  Button,
  Drawer,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TextField,
  Typography,
  Paper,
  IconButton,
} from "@mui/material";
import EditIcon from "@mui/icons-material/Edit";
import DeleteIcon from "@mui/icons-material/Delete";

type User = {
  id: number;
  name: string;
  email: string;
};

const initialUsers: User[] = [
  { id: 1, name: "Иван Иванов", email: "ivan@example.com" },
  { id: 2, name: "Анна Смирнова", email: "anna@example.com" },
];

export default function UserTable() {
  const [users, setUsers] = useState<User[]>(initialUsers);
  const [drawerOpen, setDrawerOpen] = useState(false);
  const [currentUser, setCurrentUser] = useState<User | null>(null);

  const [formName, setFormName] = useState("");
  const [formEmail, setFormEmail] = useState("");

  const handleOpenAddDrawer = () => {
    setCurrentUser(null);
    setFormName("");
    setFormEmail("");
    setDrawerOpen(true);
  };

  const handleOpenEditDrawer = (user: User) => {
    setCurrentUser(user);
    setFormName(user.name);
    setFormEmail(user.email);
    setDrawerOpen(true);
  };

  const handleSubmit = () => {
    if (!formName.trim() || !formEmail.trim()) return;

    if (currentUser) {
      // Редактирование
      setUsers((prev) =>
        prev.map((u) =>
          u.id === currentUser.id ? { ...u, name: formName, email: formEmail } : u
        )
      );
    } else {
      // Добавление
      const newUser = {
        id: Date.now(),
        name: formName,
        email: formEmail,
      };
      setUsers((prev) => [...prev, newUser]);
    }

    setDrawerOpen(false);
    setFormName("");
    setFormEmail("");
    setCurrentUser(null);
  };

  const handleDeleteUser = (id: number) => {
    setUsers((prev) => prev.filter((user) => user.id !== id));
  };

  return (
    <Box p={4}>
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
        <Typography variant="h6">Пользователи</Typography>
        <Button variant="contained" onClick={handleOpenAddDrawer}>
          Добавить пользователя
        </Button>
      </Box>

      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Имя</TableCell>
              <TableCell>Email</TableCell>
              <TableCell align="right">Действия</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {users.map((user) => (
              <TableRow key={user.id}>
                <TableCell>{user.name}</TableCell>
                <TableCell>{user.email}</TableCell>
                <TableCell align="right">
                  <IconButton onClick={() => handleOpenEditDrawer(user)} aria-label="Редактировать">
                    <EditIcon />
                  </IconButton>
                  <IconButton
                    onClick={() => handleDeleteUser(user.id)}
                    aria-label="Удалить"
                    color="error"
                  >
                    <DeleteIcon />
                  </IconButton>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>

      <Drawer
        anchor="right"
        open={drawerOpen}
        onClose={() => setDrawerOpen(false)}
      >
        <Box p={3} width={300}>
          <Typography variant="h6" mb={2}>
            {currentUser ? "Редактировать пользователя" : "Новый пользователь"}
          </Typography>
          <TextField
            label="Имя"
            fullWidth
            margin="normal"
            value={formName}
            onChange={(e) => setFormName(e.target.value)}
          />
          <TextField
            label="Email"
            fullWidth
            margin="normal"
            value={formEmail}
            onChange={(e) => setFormEmail(e.target.value)}
          />
          <Button variant="contained" fullWidth onClick={handleSubmit}>
            {currentUser ? "Сохранить изменения" : "Добавить"}
          </Button>
        </Box>
      </Drawer>
    </Box>
  );
}
